{"version":3,"sources":["Tree/index.js","Download/index.js","App/getTranslationsToTree.js","App/index.js","reportWebVitals.js","index.js"],"names":["useTreeItemStyles","makeStyles","theme","root","color","palette","text","secondary","content","borderTopRightRadius","spacing","borderBottomRightRadius","paddingRight","fontWeight","typography","fontWeightMedium","fontWeightRegular","group","marginLeft","paddingLeft","expanded","selected","label","labelRoot","display","alignItems","padding","labelIcon","marginRight","labelText","flexGrow","StyledTreeItem","props","classes","LabelIcon","labelInfo","bgColor","badge","other","TreeItem","className","Badge","variant","invisible","anchorOrigin","vertical","horizontal","Typography","style","useStyles","height","maxWidth","Tree","values","data","onSelect","langs","Object","keys","renderTree","nodes","nodeId","id","every","lang","filter","key","includes","_","get","name","Array","isArray","children","FolderIcon","TranslateIcon","renderChildren","map","node","TreeView","onNodeSelect","event","nodeIds","array","value","o","some","iter","a","getObject","defaultExpanded","defaultCollapseIcon","defaultExpandIcon","defaultEndIcon","width","Download","download","zip","JSZip","d","Date","dformat","getMonth","getDate","getFullYear","join","getHours","getMinutes","getSeconds","forEach","file","JSON","stringify","generateAsync","type","blob","saveAs","getTranslationsToTree","json","obj","set","getTree","path","drawerWidth","drawer","breakpoints","up","flexShrink","appBar","menuButton","toolbar","mixins","justifyContent","drawerPaper","App","window","useTheme","React","useState","mobileOpen","setMobileOpen","mainLang","setMainLang","setSelected","setData","handleDrawerToggle","toString","Divider","container","undefined","document","body","CssBaseline","AppBar","position","Toolbar","IconButton","aria-label","edge","onClick","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","Paper","marginBottom","multiple","onChange","e","input","target","Promise","all","files","resolve","reject","reader","FileReader","onloadend","console","log","replace","parse","result","err","readAsText","results","resultsObj","reduce","acc","item","Button","size","startIcon","textAlign","TextField","helperText","margin","fullWidth","multiline","newData","paragraph","h3","language","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f836efdb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {makeStyles} from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport Typography from '@material-ui/core/Typography';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport Badge from '@material-ui/core/Badge';\nimport _ from 'lodash';\n\nconst useTreeItemStyles = makeStyles(theme => ({\n  root: {\n    color: theme.palette.text.secondary,\n    // '&:hover > $content': {\n    //   backgroundColor: theme.palette.action.hover,\n    // },\n    // '&:focus > $content, &$selected > $content': {\n    //   backgroundColor: `var(--tree-view-bg-color, ${theme.palette.grey[400]})`,\n    //   color: 'var(--tree-view-color)',\n    // },\n    // '&:focus > $content $label, &:hover > $content $label, &$selected > $content $label': {\n    //   backgroundColor: 'transparent',\n    // },\n  },\n  content: {\n    color: theme.palette.text.secondary,\n    borderTopRightRadius: theme.spacing(2),\n    borderBottomRightRadius: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n    fontWeight: theme.typography.fontWeightMedium,\n    '$expanded > &': {\n      fontWeight: theme.typography.fontWeightRegular,\n    },\n  },\n  group: {\n    marginLeft: 0,\n    '& $content': {\n      paddingLeft: theme.spacing(2),\n    },\n  },\n  expanded: {},\n  selected: {},\n  label: {\n    fontWeight: 'inherit',\n    color: 'inherit',\n  },\n  labelRoot: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0.5, 0),\n  },\n  labelIcon: {\n    marginRight: theme.spacing(1),\n  },\n  labelText: {\n    fontWeight: 'inherit',\n    flexGrow: 1,\n  },\n}));\n\nfunction StyledTreeItem(props) {\n  const classes = useTreeItemStyles();\n  const {\n    labelText,\n    labelIcon: LabelIcon,\n    labelInfo,\n    color,\n    bgColor,\n    badge,\n    ...other\n  } = props;\n\n  return (\n    <TreeItem\n      label={\n        <div className={classes.labelRoot}>\n          <Badge\n            variant=\"dot\"\n            color=\"error\"\n            invisible={!badge}\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}>\n            <LabelIcon color=\"inherit\" className={classes.labelIcon} />\n          </Badge>\n          <Typography variant=\"body2\" className={classes.labelText}>\n            {labelText}\n          </Typography>\n          <Typography variant=\"caption\" color=\"inherit\">\n            {labelInfo}\n          </Typography>\n        </div>\n      }\n      style={{\n        '--tree-view-color': color,\n        '--tree-view-bg-color': bgColor,\n      }}\n      classes={{\n        root: classes.root,\n        content: classes.content,\n        expanded: classes.expanded,\n        selected: classes.selected,\n        group: classes.group,\n        label: classes.label,\n      }}\n      {...other}\n    />\n  );\n}\n\nStyledTreeItem.propTypes = {\n  bgColor: PropTypes.string,\n  color: PropTypes.string,\n  labelIcon: PropTypes.elementType,\n  labelInfo: PropTypes.string,\n  labelText: PropTypes.string.isRequired,\n};\n\nconst useStyles = makeStyles({\n  root: {\n    height: 264,\n    flexGrow: 1,\n    maxWidth: 400,\n  },\n});\nfunction getObject(array, key, value) {\n  let o;\n  array.some(function iter(a) {\n    if (a[key] === value) {\n      o = a;\n      return true;\n    }\n    return Array.isArray(a.children) && a.children.some(iter);\n  });\n  return o;\n}\n\nexport default function Tree(props) {\n  const {values, data = [], onSelect} = props;\n  const langs = Object.keys(values);\n  const classes = useStyles();\n\n  const renderTree = nodes => (\n    <StyledTreeItem\n      key={nodes.id}\n      nodeId={nodes.id}\n      badge={(() => {\n        return !langs.every(lang => {\n          const allPaths = Object.keys(values[lang]).filter(\n            key => nodes.id.includes(key) || key.includes(nodes.id),\n          );\n          const hasValue = allPaths\n            .filter(key => !_.get(data, `${lang}.${key}.children`))\n            .every(key => values[lang][key]);\n\n          return hasValue;\n        });\n      })()}\n      labelText={nodes.name}\n      labelIcon={Array.isArray(nodes.children) ? FolderIcon : TranslateIcon}>\n      {renderChildren(nodes.children)}\n    </StyledTreeItem>\n  );\n  const renderChildren = children => {\n    return Array.isArray(children)\n      ? children.map(node => renderTree(node))\n      : null;\n  };\n\n  return (\n    <TreeView\n      className={classes.root}\n      onNodeSelect={(event, nodeIds) => {\n        const node = getObject(data, 'id', nodeIds);\n        if (!node.children) {\n          onSelect(nodeIds);\n          // } else {\n          //   onSelect(null);\n        }\n      }}\n      defaultExpanded={['1']}\n      defaultCollapseIcon={<ArrowDropDownIcon />}\n      defaultExpandIcon={<ArrowRightIcon />}\n      defaultEndIcon={<div style={{width: 24}} />}>\n      {renderChildren(data)}\n    </TreeView>\n  );\n}\n","import {saveAs} from 'file-saver';\nimport JSZip from 'jszip';\n\nexport default function Download(props) {\n  const {children} = props;\n\n  return children({\n    ...props,\n    download: async (langs = {}) => {\n      const zip = new JSZip();\n      const d = new Date();\n      const dformat =\n        [d.getMonth() + 1, d.getDate(), d.getFullYear()].join('/') +\n        ' ' +\n        [d.getHours(), d.getMinutes(), d.getSeconds()].join(':');\n      Object.keys(langs).forEach(lang => {\n        zip.file(`${lang}.json`, JSON.stringify(langs[lang]));\n      });\n\n      const blob = await zip.generateAsync({type: 'blob'});\n      saveAs(blob, `${dformat}.zip`);\n    },\n  });\n}\n","import _ from 'lodash';\nexport default function getTranslationsToTree(json = {}) {\n  const obj = {};\n  Object.keys(json).forEach((key) => {\n    _.set(obj, key, json[key]);\n  });\n\n  const getTree = (data, path) => {\n    if ('string' === typeof data) {\n      return {children: null, value: data};\n    }\n\n    const children = Object.keys(data).map(key => {\n      const id = path ? `${path}.${key}` : key;\n      return {\n        id,\n        name: key,\n        ...getTree(data[key], id),\n      };\n    });\n\n    return {children, value: null};\n  };\n\n  const root = getTree(obj);\n\n  return root.children;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\nimport Paper from '@material-ui/core/Paper';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\nimport Highlight from 'react-highlight.js';\nimport Tree from '../Tree/';\nimport Download from '../Download/';\nimport getTranslationsToTree from './getTranslationsToTree';\nimport _ from 'lodash';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n    },\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n  // necessary for content to be below app bar\n  toolbar: {\n    ...theme.mixins.toolbar,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction App(props) {\n  const {window} = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n\n  const [mainLang, setMainLang] = React.useState('en');\n  const [selected, setSelected] = React.useState();\n  const [data, setData] = React.useState({});\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar}>{Object.keys(data).toString()}</div>\n      <Divider />\n\n      {data && data[mainLang] ? (\n        <Tree\n          values={data}\n          data={getTranslationsToTree(data[mainLang])}\n          onSelect={nodeIds => {\n            setSelected(nodeIds);\n          }}\n        />\n      ) : null}\n    </div>\n  );\n\n  const container =\n    window !== undefined ? () => window().document.body : undefined;\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            <TranslateIcon /> intl-translations\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}>\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open>\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n\n        <Paper style={{padding: 20, marginBottom: 20}}>\n          <input\n            name=\"files\"\n            type=\"file\"\n            multiple\n            onChange={async e => {\n              const input = e.target;\n\n              const results = await Promise.all(\n                [...input.files].map(\n                  file =>\n                    new Promise((resolve, reject) => {\n                      const reader = new FileReader();\n                      reader.onloadend = () => {\n                        try {\n                          console.log(file);\n                          const lang = file.name.replace('.json', '');\n                          resolve({lang, data: JSON.parse(reader.result)});\n                        } catch (err) {\n                          // Return a blank value; ignore non-JSON (or do whatever else)\n                          console.log('Please use .json!');\n                          resolve();\n                        }\n                      };\n                      reader.readAsText(file);\n                    }),\n                ),\n              );\n\n              const resultsObj = results.reduce(\n                (acc, item) => ({\n                  ...acc,\n                  [item.lang]: item.data,\n                }),\n                {},\n              );\n              // Do Stuff\n              console.log(results, resultsObj);\n\n              setMainLang(Object.keys(resultsObj)[0]);\n              setData(resultsObj);\n            }}\n          />\n\n          {data && data[mainLang] ? (\n            <Download>\n              {({download}) => (\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"small\"\n                  startIcon={<CloudDownloadIcon />}\n                  onClick={() => {\n                    download(data);\n                  }}>\n                  Download\n                </Button>\n              )}\n            </Download>\n          ) : null}\n        </Paper>\n        {selected ? (\n          <Paper style={{padding: 20, marginBottom: 20}}>\n            <div>\n              <div style={{textAlign: 'center'}}>\n                <b>{selected}</b>\n              </div>\n              {Object.keys(data).map(lang => (\n                <div key={`lang-field-${lang}`}>\n                  <TextField\n                    id=\"outlined-basic\"\n                    label={lang}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    helperText={`translate in ${lang}`}\n                    margin=\"normal\"\n                    fullWidth\n                    multiline\n                    value={_.get(data[lang], selected)}\n                    onChange={(e, value) => {\n                      const newData = JSON.parse(JSON.stringify(data));\n                      newData[lang][selected] = e.target.value;\n                      setData(newData);\n                    }}\n                  />\n                </div>\n              ))}\n            </div>\n          </Paper>\n        ) : null}\n        <Paper style={{padding: 20, marginBottom: 20}}>\n          <Typography paragraph>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Rhoncus\n            dolor purus non enim praesent elementum facilisis leo vel. Risus at\n          </Typography>\n          <Typography h3>\n              english (en.json)\n          </Typography>\n          <Highlight language=\"js\">\n            {`\n{\n  \"ComponentName.error\": \"Error\",\n  \"ComponentName.Success\": \"Success\"\n}\n            `}\n          </Highlight>\n          <Typography h3>\n              greek (el.json)\n          </Typography>\n          <Highlight language=\"js\">\n            {`\n{\n  \"ComponentName.error\": \"\",\n  \"ComponentName.Success\": \"\"\n}\n            `}\n          </Highlight>\n        </Paper>\n      </main>\n    </div>\n  );\n}\n\nApp.propTypes = {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window: PropTypes.func,\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}