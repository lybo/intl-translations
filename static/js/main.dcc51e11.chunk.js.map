{"version":3,"sources":["Tree/index.js","Download/index.js","Stats/index.js","Preview/index.js","App/getTranslationsToTree.js","App/index.js","reportWebVitals.js","index.js"],"names":["useTreeItemStyles","makeStyles","theme","root","color","palette","text","secondary","content","borderTopRightRadius","spacing","borderBottomRightRadius","paddingRight","fontWeight","typography","fontWeightMedium","fontWeightRegular","group","marginLeft","paddingLeft","expanded","selected","label","labelRoot","display","alignItems","padding","labelIcon","marginRight","labelText","flexGrow","StyledTreeItem","props","classes","LabelIcon","labelInfo","bgColor","badge","other","TreeItem","className","Badge","variant","invisible","anchorOrigin","vertical","horizontal","Typography","style","useStyles","height","maxWidth","Tree","values","data","onSelect","langs","Object","keys","renderTree","nodes","nodeId","id","every","lang","filter","key","includes","_","get","name","Array","isArray","children","FolderIcon","TranslateIcon","renderChildren","map","node","TreeView","onNodeSelect","event","nodeIds","array","value","o","some","iter","a","getObject","defaultCollapseIcon","defaultExpandIcon","defaultEndIcon","width","Download","download","zip","JSZip","d","Date","dformat","getMonth","getDate","getFullYear","join","getHours","getMinutes","getSeconds","forEach","file","JSON","stringify","generateAsync","type","blob","saveAs","rowDone","background","rowUndone","rowHeader","Stats","numberOfKeys","length","numberOfTranslations","Table","size","aria-label","TableHead","TableRow","TableCell","align","TableBody","isDone","component","scope","Math","round","Preview","setSelected","onClick","getTranslationsToTree","json","obj","set","getTree","path","drawerWidth","drawer","breakpoints","up","flexShrink","appBarWithDrawer","appBarWithoutDrawer","menuButton","toolbar","mixins","justifyContent","drawerPaper","App","window","useTheme","React","useState","drawerOpen","setDrawerOpen","mainLang","setMainLang","setData","visiblePreview","setVisiblePreview","matches","useMediaQuery","useEffect","handleDrawerToggle","toString","Divider","container","undefined","document","body","CssBaseline","AppBar","position","Toolbar","IconButton","edge","noWrap","Drawer","paper","open","anchor","direction","onClose","ModalProps","keepMounted","Paper","marginBottom","Button","fullWidth","multiple","hidden","onChange","e","input","target","Promise","all","files","resolve","reject","reader","FileReader","onloadend","console","log","replace","parse","result","err","readAsText","results","resultsObj","reduce","acc","item","Fragment","Grid","xs","startIcon","textAlign","TextField","helperText","margin","multiline","newData","gutterBottom","justify","paragraph","href","Link","h3","language","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dcc51e11.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {makeStyles} from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport Typography from '@material-ui/core/Typography';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport Badge from '@material-ui/core/Badge';\nimport _ from 'lodash';\n\nconst useTreeItemStyles = makeStyles(theme => ({\n  root: {\n    color: theme.palette.text.secondary,\n    // '&:hover > $content': {\n    //   backgroundColor: theme.palette.action.hover,\n    // },\n    // '&:focus > $content, &$selected > $content': {\n    //   backgroundColor: `var(--tree-view-bg-color, ${theme.palette.grey[400]})`,\n    //   color: 'var(--tree-view-color)',\n    // },\n    // '&:focus > $content $label, &:hover > $content $label, &$selected > $content $label': {\n    //   backgroundColor: 'transparent',\n    // },\n  },\n  content: {\n    color: theme.palette.text.secondary,\n    borderTopRightRadius: theme.spacing(2),\n    borderBottomRightRadius: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n    fontWeight: theme.typography.fontWeightMedium,\n    '$expanded > &': {\n      fontWeight: theme.typography.fontWeightRegular,\n    },\n  },\n  group: {\n    marginLeft: 0,\n    '& $content': {\n      paddingLeft: theme.spacing(2),\n    },\n  },\n  expanded: {},\n  selected: {},\n  label: {\n    fontWeight: 'inherit',\n    color: 'inherit',\n  },\n  labelRoot: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0.5, 0),\n  },\n  labelIcon: {\n    marginRight: theme.spacing(1),\n  },\n  labelText: {\n    fontWeight: 'inherit',\n    flexGrow: 1,\n  },\n}));\n\nfunction StyledTreeItem(props) {\n  const classes = useTreeItemStyles();\n  const {\n    labelText,\n    labelIcon: LabelIcon,\n    labelInfo,\n    color,\n    bgColor,\n    badge,\n    ...other\n  } = props;\n\n  return (\n    <TreeItem\n      label={\n        <div className={classes.labelRoot}>\n          <Badge\n            variant=\"dot\"\n            color=\"error\"\n            invisible={!badge}\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}>\n            <LabelIcon color=\"inherit\" className={classes.labelIcon} />\n          </Badge>\n          <Typography variant=\"body2\" className={classes.labelText}>\n            {labelText}\n          </Typography>\n          <Typography variant=\"caption\" color=\"inherit\">\n            {labelInfo}\n          </Typography>\n        </div>\n      }\n      style={{\n        '--tree-view-color': color,\n        '--tree-view-bg-color': bgColor,\n      }}\n      classes={{\n        root: classes.root,\n        content: classes.content,\n        expanded: classes.expanded,\n        selected: classes.selected,\n        group: classes.group,\n        label: classes.label,\n      }}\n      {...other}\n    />\n  );\n}\n\nStyledTreeItem.propTypes = {\n  bgColor: PropTypes.string,\n  color: PropTypes.string,\n  labelIcon: PropTypes.elementType,\n  labelInfo: PropTypes.string,\n  labelText: PropTypes.string.isRequired,\n};\n\nconst useStyles = makeStyles({\n  root: {\n    height: 264,\n    flexGrow: 1,\n    maxWidth: 400,\n  },\n});\nfunction getObject(array, key, value) {\n  let o;\n  array.some(function iter(a) {\n    if (a[key] === value) {\n      o = a;\n      return true;\n    }\n    return Array.isArray(a.children) && a.children.some(iter);\n  });\n  return o;\n}\n\nexport default function Tree(props) {\n  const {values, data = [], onSelect, selected} = props;\n  const langs = Object.keys(values);\n  const classes = useStyles();\n\n  const renderTree = nodes => (\n    <StyledTreeItem\n      key={nodes.id}\n      nodeId={nodes.id}\n      badge={(() => {\n        return !langs.every(lang => {\n          const allPaths = Object.keys(values[lang]).filter(\n            key => nodes.id.includes(key) || key.includes(nodes.id),\n          );\n          const hasValue = allPaths\n            .filter(key => !_.get(data, `${lang}.${key}.children`))\n            .every(key => values[lang][key]);\n\n          return hasValue;\n        });\n      })()}\n      labelText={nodes.name}\n      labelIcon={Array.isArray(nodes.children) ? FolderIcon : TranslateIcon}>\n      {renderChildren(nodes.children)}\n    </StyledTreeItem>\n  );\n  const renderChildren = children => {\n    return Array.isArray(children)\n      ? children.map(node => renderTree(node))\n      : null;\n  };\n\n  return (\n    <TreeView\n      className={classes.root}\n      onNodeSelect={(event, nodeIds) => {\n        const node = getObject(data, 'id', nodeIds);\n        if (!node.children) {\n          onSelect(nodeIds);\n          // } else {\n          //   onSelect(null);\n        }\n      }}\n      selected={selected}\n      defaultCollapseIcon={<ArrowDropDownIcon />}\n      defaultExpandIcon={<ArrowRightIcon />}\n      defaultEndIcon={<div style={{width: 24}} />}>\n      {renderChildren(data)}\n    </TreeView>\n  );\n}\n","import {saveAs} from 'file-saver';\nimport JSZip from 'jszip';\n\nexport default function Download(props) {\n  const {children} = props;\n\n  return children({\n    ...props,\n    download: async (langs = {}) => {\n      const zip = new JSZip();\n      const d = new Date();\n      const dformat =\n        [d.getMonth() + 1, d.getDate(), d.getFullYear()].join('/') +\n        ' ' +\n        [d.getHours(), d.getMinutes(), d.getSeconds()].join(':');\n      Object.keys(langs).forEach(lang => {\n        zip.file(`${lang}.json`, JSON.stringify(langs[lang]));\n      });\n\n      const blob = await zip.generateAsync({type: 'blob'});\n      saveAs(blob, `${dformat}.zip`);\n    },\n  });\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport {makeStyles} from '@material-ui/core/styles';\n// import TableContainer from '@material-ui/core/TableContainer';\n\nconst useStyles = makeStyles(theme => ({\n  rowDone: {\n    background: 'rgba(0, 220, 0, 0.1)',\n  },\n  rowUndone: {\n    background: 'rgba(220, 0, 0, 0.1)',\n  },\n  rowHeader: {\n    background: 'rgba(200, 200, 200, 0.2)',\n  },\n}));\n\nexport default function Stats(props) {\n  const {data} = props;\n  const classes = useStyles();\n  const langs = Object.keys(data).map(lang => {\n    const keys = Object.keys(data[lang]);\n    const numberOfKeys = keys.length;\n    const numberOfTranslations = keys.filter(key => data[lang][key]).length;\n    return {\n      id: lang,\n      name: lang,\n      numberOfKeys,\n      numberOfTranslations,\n    };\n  });\n  return (\n    <Table size=\"small\" aria-label=\"a dense table\">\n      <TableHead>\n        <TableRow className={classes.rowHeader}>\n          <TableCell>Langs</TableCell>\n          <TableCell align=\"right\">Number Of Keys</TableCell>\n          <TableCell align=\"right\">Number Of Translations</TableCell>\n          <TableCell align=\"right\">Translated</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {langs.map(lang => {\n          const isDone = lang.numberOfTranslations / lang.numberOfKeys === 1;\n          return (\n            <TableRow key={`stats-lang-data-${lang.id}`} className={isDone ? classes.rowDone : classes.rowUndone }>\n              <TableCell component=\"th\" scope=\"row\">\n                <b>{lang.name}</b>\n              </TableCell>\n              <TableCell align=\"right\">{lang.numberOfKeys}</TableCell>\n              <TableCell align=\"right\">{lang.numberOfTranslations}</TableCell>\n              <TableCell align=\"right\">\n                {Math.round(\n                  (lang.numberOfTranslations / lang.numberOfKeys) * 100,\n                )}{' '}\n                %\n              </TableCell>\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </Table>\n  );\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport {makeStyles} from '@material-ui/core/styles';\n// import TableContainer from '@material-ui/core/TableContainer';\n\nconst useStyles = makeStyles(theme => ({\n  rowDone: {\n    background: 'rgba(0, 220, 0, 0.1)',\n  },\n  rowUndone: {\n    background: 'rgba(220, 0, 0, 0.1)',\n  },\n  rowHeader: {\n    background: 'rgba(200, 200, 200, 0.2)',\n  },\n}));\n\nexport default function Preview(props) {\n  const {data, setSelected} = props;\n  const classes = useStyles();\n  const keys = Object.keys(data[Object.keys(data)[0]]);\n  const langs = Object.keys(data);\n  return (\n    <Table size=\"small\" aria-label=\"a dense table\">\n      <TableHead>\n        <TableRow className={classes.rowHeader}>\n          <TableCell>Keys</TableCell>\n          {langs.map(lang => (\n            <TableCell>{lang}</TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {keys.map(key => {\n          return (\n            <TableRow key={`preview-lang-data-${key}`}>\n              <TableCell\n                align=\"left\"\n                onClick={() => {\n                  setSelected(key);\n                }}>\n                {key}\n              </TableCell>\n              {langs.map(lang => (\n                <TableCell align=\"left\">{data[lang][key]}</TableCell>\n              ))}\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </Table>\n  );\n}\n","import _ from 'lodash';\nexport default function getTranslationsToTree(json = {}) {\n  const obj = {};\n  Object.keys(json).forEach((key) => {\n    _.set(obj, key, json[key]);\n  });\n\n  const getTree = (data, path) => {\n    if ('string' === typeof data) {\n      return {children: null, value: data};\n    }\n\n    const children = Object.keys(data).map(key => {\n      const id = path ? `${path}.${key}` : key;\n      return {\n        id,\n        name: key,\n        ...getTree(data[key], id),\n      };\n    });\n\n    return {children, value: null};\n  };\n\n  const root = getTree(obj);\n\n  return root.children;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport Drawer from '@material-ui/core/Drawer';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\nimport Paper from '@material-ui/core/Paper';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport Grid from '@material-ui/core/Grid';\nimport Link from '@material-ui/core/Link';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\nimport Highlight from 'react-highlight.js';\nimport Tree from '../Tree/';\nimport Download from '../Download/';\nimport Stats from '../Stats/';\nimport Preview from '../Preview/';\nimport getTranslationsToTree from './getTranslationsToTree';\nimport _ from 'lodash';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBarWithDrawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n    },\n  },\n  appBarWithoutDrawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: `100%`,\n      marginLeft: 0,\n    },\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n  // necessary for content to be below app bar\n  toolbar: {\n    ...theme.mixins.toolbar,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction App(props) {\n  const {window} = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const [drawerOpen, setDrawerOpen] = React.useState(false);\n\n  const [mainLang, setMainLang] = React.useState('en');\n  const [selected, setSelected] = React.useState();\n  const [data, setData] = React.useState({});\n  const [visiblePreview, setVisiblePreview] = React.useState(false);\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\n\n  React.useEffect(() => {\n    if (matches && !drawerOpen && data && data[mainLang]) {\n      setDrawerOpen(true);\n    }\n  }, [matches, drawerOpen, data, mainLang]);\n\n  const handleDrawerToggle = () => {\n    setDrawerOpen(!drawerOpen);\n  };\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar}>{Object.keys(data).toString()}</div>\n      <Divider />\n\n      {data && data[mainLang] ? (\n        <Tree\n          values={data}\n          data={getTranslationsToTree(data[mainLang])}\n          onSelect={nodeIds => {\n            setSelected(nodeIds);\n          }}\n          selected={selected}\n        />\n      ) : null}\n    </div>\n  );\n\n  const container =\n    window !== undefined ? () => window().document.body : undefined;\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={\n          drawerOpen ? classes.appBarWithDrawer : classes.appBarWithoutDrawer\n        }>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            <TranslateIcon /> intl-translations\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      {drawerOpen ? (\n        <nav className={classes.drawer} aria-label=\"mailbox folders\">\n          {matches ? (\n            <Drawer\n              classes={{\n                paper: classes.drawerPaper,\n              }}\n              variant=\"permanent\"\n              open={drawerOpen}>\n              {drawer}\n            </Drawer>\n          ) : (\n            <Drawer\n              container={container}\n              variant=\"temporary\"\n              anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n              open={drawerOpen}\n              onClose={handleDrawerToggle}\n              classes={{\n                paper: classes.drawerPaper,\n              }}\n              ModalProps={{\n                keepMounted: true, // Better open performance on mobile.\n              }}>\n              {drawer}\n            </Drawer>\n          )}\n        </nav>\n      ) : null}\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n\n        <Paper style={{padding: 20, marginBottom: 20}}>\n          {!data || !data[mainLang] ? (\n            <Button\n              fullWidth\n              color=\"primary\"\n              variant=\"contained\"\n              component=\"label\">\n              Upload JSON Files\n              <input\n                name=\"files\"\n                type=\"file\"\n                multiple\n                hidden\n                onChange={async e => {\n                  const input = e.target;\n\n                  const results = await Promise.all(\n                    [...input.files].map(\n                      file =>\n                        new Promise((resolve, reject) => {\n                          const reader = new FileReader();\n                          reader.onloadend = () => {\n                            try {\n                              console.log(file);\n                              const lang = file.name.replace('.json', '');\n                              resolve({lang, data: JSON.parse(reader.result)});\n                            } catch (err) {\n                              // Return a blank value; ignore non-JSON (or do whatever else)\n                              console.log('Please use .json!');\n                              resolve();\n                            }\n                          };\n                          reader.readAsText(file);\n                        }),\n                    ),\n                  );\n\n                  const resultsObj = results.reduce(\n                    (acc, item) => ({\n                      ...acc,\n                      [item.lang]: item.data,\n                    }),\n                    {},\n                  );\n                  // Do Stuff\n                  console.log(results, resultsObj);\n\n                  setMainLang(Object.keys(resultsObj)[0]);\n                  setData(resultsObj);\n                  setDrawerOpen(true);\n                }}\n              />\n            </Button>\n          ) : (\n            <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n              <Button\n                color=\"secondary\"\n                variant=\"contained\"\n                size=\"small\"\n                onClick={() => {\n                  setMainLang(null);\n                  setData({});\n                  setDrawerOpen(false);\n                  setSelected(null);\n                }}>\n                Cancel the translation\n              </Button>\n            </div>\n          )}\n          <br />\n          <br />\n\n          {data && data[mainLang] ? (\n            <React.Fragment>\n              <Stats data={data} />\n              <br />\n              <Grid container spacing={3}>\n                <Grid item xs={6}>\n                  <Download>\n                    {({download}) => (\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        size=\"small\"\n                        startIcon={<CloudDownloadIcon />}\n                        onClick={() => {\n                          download(data);\n                        }}>\n                        Download\n                      </Button>\n                    )}\n                  </Download>\n                </Grid>\n                <Grid\n                  item\n                  xs={6}\n                  style={{\n                    display: 'flex',\n                    justifyContent: 'flex-end',\n                  }}>\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"small\"\n                    startIcon={\n                      !visiblePreview ? (\n                        <VisibilityIcon />\n                      ) : (\n                        <VisibilityOffIcon />\n                      )\n                    }\n                    onClick={() => {\n                      setVisiblePreview(!visiblePreview);\n                    }}>\n                    {visiblePreview ? 'Hide' : 'Show'} Preview\n                  </Button>\n                </Grid>\n              </Grid>\n              <br />\n              {visiblePreview ? (\n                <Preview data={data} setSelected={setSelected} />\n              ) : null}\n            </React.Fragment>\n          ) : null}\n        </Paper>\n        {selected ? (\n          <Paper style={{padding: 20, marginBottom: 20}}>\n            <div>\n              <div style={{textAlign: 'center'}}>\n                <b>{selected}</b>\n              </div>\n              {Object.keys(data).map(lang => (\n                <div key={`lang-field-${lang}`}>\n                  <TextField\n                    id=\"outlined-basic\"\n                    label={lang}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    helperText={`translate in ${lang}`}\n                    margin=\"normal\"\n                    fullWidth\n                    multiline\n                    value={_.get(data[lang], selected)}\n                    onChange={(e, value) => {\n                      const newData = JSON.parse(JSON.stringify(data));\n                      newData[lang][selected] = e.target.value;\n                      setData(newData);\n                    }}\n                  />\n                </div>\n              ))}\n            </div>\n          </Paper>\n        ) : null}\n\n        <Typography variant=\"h4\" component=\"h1\" align=\"center\" gutterBottom>\n          intl-translations\n        </Typography>\n        <Paper style={{padding: 20, marginBottom: 20}}>\n          <Typography variant=\"h6\" component=\"h2\" gutterBottom align=\"center\">\n            Translation editor for apps\n          </Typography>\n\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <Grid container justify=\"center\" spacing={2}>\n                <Grid item>\n                  <Paper style={{padding: 20}}>\n                    <Typography align=\"center\" gutterBottom paragraph>\n                      react-intl\n                    </Typography>\n                    <Button\n                      size=\"small\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      target=\"_blank\"\n                      href=\"https://formatjs.io/docs/react-intl\">\n                      Details\n                    </Button>\n                  </Paper>\n                </Grid>\n                <Grid item>\n                  <Paper style={{padding: 20}}>\n                    <Typography align=\"center\" gutterBottom paragraph>\n                      vue-intl\n                    </Typography>\n                    <Button\n                      size=\"small\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      target=\"_blank\"\n                      href=\"https://formatjs.io/docs/vue-intl\">\n                      Details\n                    </Button>\n                  </Paper>\n                </Grid>\n                <Grid item>\n                  <Paper style={{padding: 20}}>\n                    <Typography align=\"center\" gutterBottom paragraph>\n                      formatjs\n                    </Typography>\n                    <Button\n                      size=\"small\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      target=\"_blank\"\n                      href=\"https://formatjs.io/docs/intl\">\n                      Details\n                    </Button>\n                  </Paper>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <br />\n          <Typography\n            variant=\"body1\"\n            component=\"div\"\n            gutterBottom\n            align=\"center\">\n            This tool is meant to help developers who use{' '}\n            <Link\n              href=\"https://www.npmjs.com/package/babel-plugin-react-intl-auto\"\n              target=\"_blank\">\n              babel-plugin-react-intl-auto\n            </Link>{' '}\n            and{' '}\n            <Link\n              href=\"https://www.npmjs.com/package/extract-react-intl-messages\"\n              target=\"_blank\">\n              extract-react-intl-messages\n            </Link>\n          </Typography>\n          <br />\n        </Paper>\n        <Paper style={{padding: 20, marginBottom: 20}}>\n          <Typography variant=\"h6\" component=\"h2\" gutterBottom align=\"center\">\n            JSON format\n          </Typography>\n          <Typography h3>english (en.json)</Typography>\n          <Highlight language=\"js\">\n            {`\n{\n  \"ComponentName.error\": \"Error\",\n  \"ComponentName.Success\": \"Success\"\n}\n            `}\n          </Highlight>\n          <Typography h3>greek (el.json)</Typography>\n          <Highlight language=\"js\">\n            {`\n{\n  \"ComponentName.error\": \"\",\n  \"ComponentName.Success\": \"\"\n}\n            `}\n          </Highlight>\n        </Paper>\n      </main>\n    </div>\n  );\n}\n\nApp.propTypes = {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window: PropTypes.func,\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}